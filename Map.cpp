#include "Includes.h"

/*    _        
1 -> 

2 -> |
      _
3 -> |
*/


char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {3,1,3,1,1,1,3,1,1,1,1,3,1,1,1,1,1,1,1,1,2},//0
      {2,0,2,2,0,2,2,2,0,3,0,2,0,1,1,2,0,0,0,0,2},//1
      {2,0,0,2,0,2,0,2,1,0,1,2,2,0,0,2,2,1,1,0,2},//2
      {2,0,2,2,0,2,2,1,0,1,1,2,1,1,0,2,3,0,0,1,2},//3
      {2,0,2,0,0,0,3,1,0,0,0,1,1,0,1,2,0,1,3,0,2},//4
      {2,0,1,0,0,1,0,0,3,1,1,1,2,3,0,1,1,0,0,2,2},//5
      {3,0,0,1,1,2,0,0,0,0,0,0,0,0,0,1,1,2,0,2,2},//6
      {2,0,2,0,0,2,2,0,2,0,0,0,2,1,2,1,2,2,1,0,2},//7
      {2,1,3,0,0,0,1,0,1,3,1,1,0,2,0,0,0,0,1,1,2},//8
      {2,0,0,0,1,1,3,1,0,0,0,2,1,1,0,1,1,1,2,0,2},//9
      {3,0,0,1,2,0,2,0,3,1,0,2,1,1,2,0,0,0,2,1,2},//0
      {2,1,1,2,2,0,2,0,2,2,0,1,0,2,1,1,2,0,2,0,2},//1
      {2,2,0,2,2,1,1,0,2,1,0,0,0,2,1,0,0,0,1,0,2},//2
      {2,1,0,0,0,0,2,1,1,0,1,1,0,1,1,0,2,1,1,0,2},//3
      {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},//4
};
/*
char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
      {0,0,0,0,0,0,0,0,0,0,1*0,0,0,0,0,0,0,0,0,0,0},//5
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//7
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4

};*/
/*
char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
      {0,0,2,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0},//5
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//7
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4


};*/

/*char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,2,2,1,0,1,1,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
      {0,0,0,0,0,1,0,0,3,1,0,0,0,0,0,0,0,0,0,0,0},//5
      {0,0,0,1,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
      {0,0,0,0,0,2,2,0,2,0,0,0,0,0,0,0,0,0,0,0,0},//7
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//8
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
};*/
/*char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
	  {0,0,0,0,0,0,0,0,0*3,0*1,0*1,0*1,0*2,0,0,0,0,0,0,0,0},//5
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//6
      {0,0,0,0,0,0,0,0,2*0,0,0,0,0*2,0,0,0,0,0,0,0,0},//7
      {0,0,0,0,0,0,0,0,1*0,1*0,1*0,1,0,0,0,0,0,0,0,0,0},//8
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
};*/
/*
char Map::tab[NB_CELLS_H + 1][NB_CELLS_W + 1] = 
 {
  	 //0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,
  	  {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4
      {0,0,0,0,0,1,0,0,3,1,1,1,2,3,0,1,1,0,0,2,2},//5
      {0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,1,1,2,0,2,2},//6
      {0,0,0,0,0,2,2,0,2,0,0,0,2,1,2,1,2,2,1,0,2},//7
      {0,0,0,0,0,0,1,0,1,3,1,1,0,2,0,0,0,0,1,1,2},//8
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//9
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//0
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//1
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//2
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//3
      {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},//4

};*/


void Map::Init()
{
 	 m_NbLines = 0;
 	 SetLines();
	 OptimizeLines();
	 ResetLines();
}

void Map::Render(Gfx *g)
{
	 g->SetColor(0xa8a8a8);

     int n = GetNbLines();
     for (int i = 0; i < n; i ++)
     {
	  	 int line[4];
	  	 GetLine(line, i);
		 if (IsEnabledLine(i))
	  	 g->DrawLine(line[0],line[1], line[2], line[3]);
  	 } 
}

bool Map::CanMove(Actor *a, int dir)
{
// 	 	int i = a->GetIndexI();
//		int j = a->GetIndexJ();
	return false;
}

int Map::GetNbLines()
{
	 return m_NbLines;
}

void Map::SetLines()
{
 	 int n = 0;
 	  	 
     for (int i = 0; i < 15; i ++)
     {
          for (int j = 0; j < 21; j ++)
          {
		   	  int cell = Map::tab[i][j];
		   	  int x = j * CELL_W;
  		   	  int y = i * CELL_H;
  		   	  
		   	  if (cell & 1)
		   	  {
			   	 m_Lines[n][0] = x;
			   	 m_Lines[n][1] = y;
 			   	 m_Lines[n][2] = x + CELL_W;
			   	 m_Lines[n][3] = y;
			  	 n ++;
			  }

	 		  if (cell & 2)
	 		  {
  			   	 m_Lines[n][0] = x;
			   	 m_Lines[n][1] = y;
 			   	 m_Lines[n][2] = x;
			   	 m_Lines[n][3] = y + CELL_H;
			  	 n ++;
			  }
		 }
	 }
	 m_NbLines = n;
}

void Map::GetLine(int *x0,int *y0,int *x1, int *y1, int idx)
{
 	 *x0 = m_Lines[idx][0];
 	 *y0 = m_Lines[idx][1];
 	 *x1 = m_Lines[idx][2];
 	 *y1 = m_Lines[idx][3];
}

void Map::GetLine(int line[4], int idx)
{
 	 line[0] = m_Lines[idx][0];
 	 line[1] = m_Lines[idx][1];
 	 line[2] = m_Lines[idx][2];
 	 line[3] = m_Lines[idx][3];
}

bool PointIsInBox(int boxX, int boxY, int boxW, int boxH, int x, int y)
{
 	 return (x > boxX )&& (x < boxX+boxW) && (y >boxY) && (y < boxY + boxH);
// 	  	 return (x => boxX )&& (x < boxX+boxW) && (y =>boxY) && (y < boxY + boxH);
}


bool Map::HasCol(Actor * a)
{
 	 int ax = a->GetX();
 	 int ay = a->GetY();
 	 
 	 for (int i = 0; i < 15; i ++)
     {
          for (int j = 0; j < 21; j ++)
          {
		   	  int cell = Map::tab[i][j];
		   	  int x = j * CELL_W;
		   	  int y = i * CELL_H;
		   	  
  		   	  if (cell & 1)
			  {
			   	 int x2 = x + CELL_W - 1;

				 if (PointIsInBox(ax,ay,CELL_W,CELL_H, x,y) || PointIsInBox(ax,ay,CELL_W,CELL_H, x2,y))
				 	return true;
			  }
			  
	 		  if (cell & 2)
			  {
			   	 int y2 = y + CELL_H - 1; 	   
   				 if (PointIsInBox(ax,ay,CELL_W,CELL_H, x,y) || PointIsInBox(ax,ay,CELL_W,CELL_H, x,y2))
				 	return true;
			  }
		 }
	 }
	 return false;
}

void Map::OptimizeLines()
{

}

bool Map::IsEnabledLine(int idx)
{
 	 return m_ActivatedLines[idx];
}

void Map::EnableLine(int idx)
{
 	 m_ActivatedLines[idx] = true;
}


void Map::ResetLines()
{
 	 for (int i = 0; i < NB_LINES_MAX; i ++)
 	 {
	  	 m_ActivatedLines[i] = false;
	 }
}
